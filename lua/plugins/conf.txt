local M = {
  "catppuccin/nvim",
  name = "catppuccin",
  priority = 1000,
  lazy = false,
  opts = {
    flavour = "mocha", -- latte, frappe, macchiato, mocha
    background = { -- :h background
      light = "latte",
      dark = "mocha",
    },
    transparent_background = false, -- disables setting the background color.
    show_end_of_buffer = true, -- shows the '~' characters after the end of buffers
    term_colors = false, -- sets terminal colors (e.g. `g:terminal_color_0`)
    dim_inactive = {
      enabled = true, -- dims the background color of inactive window
      shade = "dark",
      percentage = 0.10, -- percentage of the shade to apply to the inactive window
    },
    no_italic = false, -- Force no italic
    no_bold = false, -- Force no bold
    no_underline = false, -- Force no underline
    styles = {
      comments = { "italic" }, -- Change the style of comments
      conditionals = { "italic" },
      loops = {},
      functions = {},
      keywords = {},
      strings = {},
      variables = {},
      numbers = {},
      booleans = {},
      properties = {},
      types = {},
      operators = {},
      -- miscs = {}, -- Uncomment to turn off hard-coded styles
    },
    color_overrides = {},
    custom_highlights = {},
    default_integrations = true,
    integrations = {
      cmp = true,
      nvimtree = true,
      treesitter = true,
      dashboard = true,
      gitsigns = true,
      dropbar = {
        enabled = true,
        color_mode = true,
      },
      fidget = true,
      mason = true,
      native_lsp = {
        enabled = true,
        virtual_text = {
            errors = { "italic" },
            hints = { "italic" },
            warnings = { "italic" },
            information = { "italic" },
            ok = { "italic" },
        },
        underlines = {
            errors = { "undercurl" },
            hints = { "undercurl" },
            warnings = { "undercurl" },
            information = { "undercurl" },
            ok = { "undercurl" },
        },
        inlay_hints = {
            background = true,
        },
      },
      treesitter_context = true,
      ufo = true,
      rainbow_delimiters = false,
      telescope = {
          enabled = true,
      },
      lsp_trouble = true,
      which_key = true,
      semantic_tokens = true,
    },
  },
  config = function(_, opts)
    require("catppuccin").setup(opts)
    vim.cmd.colorscheme("catppuccin")
  end
}

return { M }
local M = {
	"stevearc/conform.nvim",
	event = "User FilePost",
	opts = {
		formatters_by_ft = {
			lua = { "stylua" },
			python = { "isort", "black" },
			["*"] = { "codespell" },
			["_"] = { "trim_whitespace" },
		},
		format_on_save = false,
	},
	config = function(_, opts)
		conform = require("conform")

		conform.setup(opts)

		vim.keymap.set("n", "<leader>F", function()
			conform.format({ bufnr = vim.api.nvim_get_current_buf() })
		end, { desc = "Format current buffer" })
	end,
}

return { M }
local M = {
  "nvimdev/dashboard-nvim",
  event = "VimEnter",
  enabled = true,
  opts = {
    theme = "hyper",
    config = {
      header = {
          "╔════════════════════════════════════╗",
          "║                                    ║",
          "║             ／＞-- フ              ║",
          "║            | 　_　_|  miau.        ║",
          "║          ／` ミ＿xノ               ║",
          "║        /　 　　 |                  ║",
          "║       /　  ヽ　ﾉ                   ║",
          "║       │　　 | ||   MIAU   ╱|、     ║",
          "║   ／￣|　　 | ||        (˚ˎ 。7    ║",
          "║  ( ￣ ヽ＿_ヽ_)__)       |、˜〵    ║",
          "║   ＼二)                  じしˍ,)ノ ║",
          "║                                    ║",
          "╚════════════════════════════════════╝",
      },
      shortcut = {
        { desc = "Plugins", group = "@property", action = "Lazy", key = "p" },
        {
          desc = " Files",
          group = "Label",
          action = "Telescope find_files",
          key = "f",
        },
        {
          desc = " Apps",
          group = "DiagnosticHint",
          action = "Telescope app",
          key = "a",
        },
        {
          desc = " dotfiles",
          group = "Number",
          action = "Telescope dotfiles",
          key = "d",
        }
      }
    }
  }
}

return { M }
local M = {
  'Bekaboo/dropbar.nvim',
  -- optional, but required for fuzzy finder support
  dependencies = {
    'nvim-telescope/telescope-fzf-native.nvim'
  }
}

return { M }
local M = { "j-hui/fidget.nvim" }

M.opts = {
  text = {
    spinner = "bouncing_ball"
  },
  notification = {
    poll_rate = 10,
    history_size = 512,
    override_vim_notify = true,
    window = {
      winblend = 0
    }
  },
}

return M
local M = {
  "lewis6991/gitsigns.nvim",
  event = "User FilePost",
  opts = {
    signs = {
      add          = { text = '┃' },
      change       = { text = '┃' },
      delete       = { text = '_' },
      topdelete    = { text = '‾' },
      changedelete = { text = '~' },
      untracked    = { text = '┆' },
    },
    signs_staged = {
      add          = { text = '┃' },
      change       = { text = '┃' },
      delete       = { text = '_' },
      topdelete    = { text = '‾' },
      changedelete = { text = '~' },
      untracked    = { text = '┆' },
    },
    signs_staged_enable = true,
    signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
    numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
    linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
    word_diff  = true, -- Toggle with `:Gitsigns toggle_word_diff`
    watch_gitdir = {
      follow_files = true
    },
    auto_attach = true,
    attach_to_untracked = false,
    current_line_blame = true, -- Toggle with `:Gitsigns toggle_current_line_blame`
    current_line_blame_opts = {
      virt_text = true,
      virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
      delay = 1000,
      ignore_whitespace = false,
      virt_text_priority = 100,
      use_focus = true,
    },
    current_line_blame_formatter = '<author>, <author_time:%R> - <summary>',
    sign_priority = 6,
    update_debounce = 100,
    status_formatter = nil, -- Use default
    max_file_length = 40000, -- Disable if file is longer than this (in lines)
    preview_config = {
      -- Options passed to nvim_open_win
      border = 'single',
      style = 'minimal',
      relative = 'cursor',
      row = 0,
      col = 1
    },
  },
  config = function(_, opts)
    require("gitsigns").setup(opts)

    vim.api.nvim_create_autocmd('ColorScheme', {
      pattern = "*",
      callback = function()
        vim.cmd [[
          hi GitSignsChangeInline gui=reverse
          hi GitSignsAddInline gui=reverse
          hi GitSignsDeleteInline gui=reverse
        ]]
      end
    })
  end
}

return { M }
local M = {
	"robitx/gp.nvim",
  opts = {
    openai_api_key = { "cat", "/home/fox/.config/openai.token" }
  },
	config = function(_, opts)
		require("gp").setup(opts)
	end,
}

return { M }
local highlight = { "RainbowRed", "RainbowYellow", "RainbowBlue", "RainbowOrange", "RainbowGreen", "RainbowViolet", "RainbowCyan" }

local M = {
  "lukas-reineke/indent-blankline.nvim",
  main = "ibl",
  event = "User FilePost",
  dependencies = { "HiPhish/rainbow-delimiters.nvim" },
  opts = {
    scope = { highlight = highlight },
    exclude = { filetypes = { "dashboard", "help", "NvimTree" } },
  },
  init = function()
    local rainbow_config = require("rainbow-delimiters")

    vim.g.rainbow_delimiters = {
      strategy = {
        [''] = rainbow_config.strategy['global'],
        vim = rainbow_config.strategy['local'],
      },
      query = {
        [''] = 'rainbow-delimiters',
        lua = 'rainbow-blocks',
      },
      priority = {
        [''] = 110,
        lua = 210,
      },
      highlight = highlight
    }
  end,
  config = function(_, opts)
    local hooks = require("ibl.hooks")
    hooks.register(hooks.type.HIGHLIGHT_SETUP, function()
      vim.api.nvim_set_hl(0, "RainbowRed", { fg = "#E06C75" })
      vim.api.nvim_set_hl(0, "RainbowYellow", { fg = "#E5C07B" })
      vim.api.nvim_set_hl(0, "RainbowBlue", { fg = "#61AFEF" })
      vim.api.nvim_set_hl(0, "RainbowOrange", { fg = "#D19A66" })
      vim.api.nvim_set_hl(0, "RainbowGreen", { fg = "#98C379" })
      vim.api.nvim_set_hl(0, "RainbowViolet", { fg = "#C678DD" })
      vim.api.nvim_set_hl(0, "RainbowCyan", { fg = "#56B6C2" })
    end)

    require("ibl").setup(opts)

    hooks.register(hooks.type.SCOPE_HIGHLIGHT, hooks.builtin.scope_highlight_from_extmark)
  end
}

return { M }
local M = {
  { "nvim-lua/plenary.nvim", lazy = true },
  { "nvim-tree/nvim-web-devicons", lazy = true },
  { 'echasnovski/mini.icons', version = false, lazy = true },
}

return M
local M = {
  "kdheepak/lazygit.nvim",
  cmd = {
    "LazyGit",
    "LazyGitConfig",
    "LazyGitCurrentFile",
    "LazyGitFilter",
    "LazyGitFilterCurrentFile",
  },
  -- setting the keybinding for LazyGit with 'keys' is recommended in
  -- order to load the plugin when the command is run for the first time
  keys = {
    { "<leader>g", "<cmd>LazyGit<cr>", desc = "LazyGit" }
  }
}

return { M }
local M = { "folke/lsp-colors.nvim" }

M.opts = {
  Error = "#FF10F0",
  Warning = "#FFC300",
  Hint = "#DAF7A6",
  Information = "#5BCEFA",
}

M.config = function(_, opts)
  require("lsp-colors").setup(opts)
end

return { M }
local SymbolKind = vim.lsp.protocol.SymbolKind

local M = {
	"VidocqH/lsp-lens.nvim",
	opts = {
		enable = true,
		include_declaration = false, -- Reference include declaration
		sections = { -- Enable / Disable specific request, formatter example looks 'Format Requests'
			definition = false,
			references = true,
			implements = true,
			git_authors = true,
		},
		ignore_filetype = {
			"prisma",
		},
		-- Target Symbol Kinds to show lens information
		target_symbol_kinds = { SymbolKind.Function, SymbolKind.Method, SymbolKind.Interface },
		-- Symbol Kinds that may have target symbol kinds as children
		wrapper_symbol_kinds = { SymbolKind.Class, SymbolKind.Struct },
	},
  config = function (_, opts)
    require("lsp-lens").setup(opts)
  end
}

return { M }
local get_venv = function()
	if vim.bo.filetype ~= "python" then
		return ""
	end

	local venv_path = os.getenv("VIRTUAL_ENV")

	if venv_path == nil then
		return ""
	else
		return vim.fn.fnamemodify(venv_path, ":t")
	end
end

local get_active_lsp = function()
	local msg = "No LSP"
	-- local buf_ft = vim.api.nvim_get_option_value("filetype")
	local clients = vim.lsp.get_clients({ bufnr = 0 })
	if next(clients) == nil then
		return msg
	end

	for _, client in ipairs(clients) do
		---@diagnostic disable-next-line: undefined-field
		local filetypes = client.config.filetypes
		if filetypes and vim.fn.index(filetypes, vim.bo.filetype) ~= -1 then
			return client.name
		end
	end
	return msg
end

local M = {
	"nvim-lualine/lualine.nvim",
	dependencies = {
		"nvim-tree/nvim-web-devicons",
		"Isrothy/lualine-diagnostic-message",
		-- "jim-at-jibba/micropython.nvim",
	},
	opts = {
		options = {
			theme = "catppuccin",
			icons_enabled = true,
			disabled_filetypes = { statusline = { "dashboard" }, winbar = { "dashboard" } },
		},
		sections = {
			lualine_a = { "mode" },
			lualine_b = {
				"branch",
				{
					"diff",
					source = function()
						local gitsigns = vim.b.gitsigns_status_dict
						if gitsigns then
							return {
								added = gitsigns.added,
								modified = gitsigns.changed,
								removed = gitsigns.removed,
							}
						end
					end,
				},
			},
			lualine_c = {
				{
					"diagnostics",
					sources = { "nvim_diagnostic" },
				},
				{ "searchcount", maxcount = 999, timeout = 500 },
			},
			lualine_x = {
				"diagnostic-message",
				{ get_active_lsp },
			},
			lualine_y = {
				{ "progress", padding = { left = 1, right = 1 } },
			},
			lualine_z = {
				{ get_venv },
				function()
					return os.date("%R")
				end,
			},
		},
		winbar = {
			lualine_a = {
				"tabs",
				"hostname",
			},
			lualine_b = {
				{ "fileformat", symbols = { unix = " ", dos = " ", mac = " " } },
				{ "encoding", fmt = string.upper },
				{ "filesize" },
			},
			lualine_c = {
				{ "filetype", icon_only = true, separator = "", padding = { left = 1, right = 0 } },
				{
					"filename",
					padding = { left = 0, right = 1 },
					symbols = { readonly = "[R]", modified = "[~]", unnamed = "[*]", newfile = "[+]" },
				},
			},
			lualine_x = {},
			lualine_y = {},
			lualine_z = {
				{
					"buffers",
					show_filename_only = true,
					mode = 2,
				},
			},
		},
		tabline = {},
		extensions = { "lazy", "mason", "mundo", "nvim-tree", "trouble" },
	},
	config = function(_, opts)
		local keymap = vim.keymap
		keymap.set("n", "gb", function()
			vim.cmd("LualineBuffersJump! " .. vim.v.count)
		end, { desc = "Jump to the buffer" })
		keymap.set("n", "gB", "<cmd>LualineBuffersJump $<CR>", { desc = "Jump to the last buffer" })

		local trouble = require("trouble")
		local symbols = trouble.statusline({
			mode = "symbols",
			groups = {},
			title = false,
			filter = { range = true },
			format = "{kind_icon}{symbol.name:Normal}",
			-- The following line is needed to fix the background color
			-- Set it to the lualine section you want to use
			hl_group = "lualine_c_normal",
		})
		table.insert(opts.winbar.lualine_c, {
			symbols.get,
			cond = symbols.has,
		})
		table.insert(opts.sections.lualine_c, {
			require("micropython_nvim").statusline,
			cond = package.loaded["micropython_nvim"] and require("micropython_nvim").exists,
		})
		require("lualine").setup(opts)
	end,
}

return { M }
local M = {
  "williamboman/mason-lspconfig.nvim",
  dependencies = { "williamboman/mason.nvim" },
  opts = {
    automatic_installation = true,
    ensure_installed = {
      "lua_ls",
      "groovyls",
      "marksman",
      "pylsp",
      "jsonls",
      "bashls",
      "clangd",
      "cmake",
      "diagnosticls",
      "dockerls",
      "dotls",
      "yamlls",
      "vimls",
    }
  },
  -- config = function(_, opts)
  --   require("mason-lspconfig").setup(opts)
  -- end
}

return { M }
local M  = {
  "WhoIsSethDaniel/mason-tool-installer.nvim",
  dependencies = {
    "williamboman/mason.nvim",
  },
  opts = {
    auto_update = true,
    ensure_installed = {
      "stylua",
      "prettier",
      "isort",
      "black",
      "pylint",
      "eslint_d",
      "shellcheck",
      "editorconfig-checker",
      "autopep8",
      "cmakelang",
      "clang-format",
      "markdownlint",
      "npm-groovy-lint",
      "jsonnetfmt",
      "yamlfmt",
      "codespell",
      "cpplint",
    },
    integrations = {
      ['mason-lspconfig'] = true
    }
  },
  -- config = function(_, opts)
  --   require("mason-tool-installer").setup(opts)
  -- end
}

return { M }
local M = {
  "williamboman/mason.nvim",
  dependencies = {
    -- "williamboman/mason-lspconfig.nvim",
    -- "WhoIsSethDaniel/mason-tool-installer.nvim",
  },
  opts = {
    ui = {
      icons = {
        package_installed = "✓",
        package_pending = "➜",
        package_uninstalled = "✗"
      }
    }
  }
}

return { M }
local M = {
  "jim-at-jibba/micropython.nvim",
  lazy = false,
  dependencies = { "akinsho/toggleterm.nvim", "stevearc/dressing.nvim" },
}

return { M }
local M = {
  "hrsh7th/nvim-cmp",
  event = "InsertEnter",
  dependencies = {
    "hrsh7th/cmp-buffer",
    "hrsh7th/cmp-path",
    "hrsh7th/cmp-nvim-lua",
    "hrsh7th/cmp-nvim-lsp",
    "hrsh7th/cmp-calc",
    {"mtoohey31/cmp-fish", ft = "fish"},
    "petertriho/cmp-git",
    "hrsh7th/cmp-cmdline",
    "lukas-reineke/cmp-rg",
    "hrsh7th/cmp-nvim-lsp-document-symbol",
    "hrsh7th/cmp-nvim-lsp-signature-help",
    {
        "L3MON4D3/LuaSnip",
        version = "v2.*",
        -- install jsregexp (optional!).
        build = "make install_jsregexp",
    },
    {
      "windwp/nvim-autopairs",
      opts = {
        fast_wrap = {},
        disable_filetype = { "TelescopePrompt", "vim" },
      },
      config = function(_, opts)
        require("nvim-autopairs").setup(opts)

        -- setup cmp for autopairs
        local cmp_autopairs = require "nvim-autopairs.completion.cmp"
        require("cmp").event:on("confirm_done", cmp_autopairs.on_confirm_done())
      end,
    },
    "rafamadriz/friendly-snippets",
    "onsails/lspkind.nvim",
    {"doxnit/cmp-luasnip-choice", config = function() require('cmp_luasnip_choice').setup({ auto_open = true }) end},
    "saadparwaiz1/cmp_luasnip",
    "ray-x/cmp-treesitter",
  },
  init = function()
    vim.opt.completeopt = {'menu', 'menuone', 'noselect'}
  end,
  config = function()
    local cmp = require("cmp")
    local luasnip = require("luasnip")

    vim.diagnostic.config({
      virtual_text = true,
      severity_sort = true,
      float = {
        border = 'rounded',
        -- source = 'if_many',
      },
      signs = {
        text = {
          [vim.diagnostic.severity.ERROR] = '✘',
          [vim.diagnostic.severity.WARN] = '▲',
          [vim.diagnostic.severity.INFO] = '⚑',
          [vim.diagnostic.severity.HINT] = '',
        },
      }
    })
    vim.lsp.handlers['textDocument/hover'] = vim.lsp.with(
      vim.lsp.handlers.hover,
      {border = 'rounded'}
    )
    vim.lsp.handlers['textDocument/signatureHelp'] = vim.lsp.with(
      vim.lsp.handlers.signature_help,
      {border = 'rounded'}
    )


    require('luasnip.loaders.from_vscode').lazy_load()
    local cmp_select = { behavior = cmp.SelectBehavior.Select }

    cmp.setup({
      snippet = {
        expand = function(args)
          luasnip.lsp_expand(args.body)
        end
      },
      formatting = {
        fields = {'menu', 'abbr', 'kind'},
        expandable_indicator = true,
        format = require('lspkind').cmp_format({
          with_text = 'true', -- show only symbol annotations
          maxwidth = 50, -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)
          ellipsis_char = '...', -- when popup menu exceed maxwidth, the truncated part would show ellipsis_char instead (must define maxwidth first)
          show_labelDetails = true, -- show labelDetails in menu. Disabled by default
          menu = ({
              nvim_lsp = "[LSP]",
              luasnip = "[LuaSnip]",
              luasnip_choice = "[LuaSnip]",
              path = "[Path]",
              calc = "[Calc]",
              git = "[Git]",
              treesitter = "[TS]",
              nvim_lsp_signature_help = "[LspSig]",
              rg = "[Rg]",
              buffer = "[Buffer]",

          })
        })
      },
      sources = cmp.config.sources({
        {name = 'nvim_lsp', keyword_length = 1},
        {name = 'luasnip', keyword_length = 2},
        {name = 'luasnip_choice', keyword_length = 2},
        {name = 'path'},
        {name = 'calc'},
        {name = 'git'},
        {name = 'treesitter'},
        {name = 'nvim_lsp_signature_help'},
        {name = 'rg', keyword_length = 3},
        {name = 'buffer', keyword_length = 3},
      }),
      mapping = cmp.mapping.preset.insert({
        ['<Up>'] = cmp.mapping.select_prev_item(cmp_select),
        ['<Down>'] = cmp.mapping.select_next_item(cmp_select),

        ['<C-Up>'] = cmp.mapping.scroll_docs(-4),
        ['<C-Down>'] = cmp.mapping.scroll_docs(4),

        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.abort(),
        ['<CR>'] = cmp.mapping.confirm({select = true, behavior = cmp.ConfirmBehavior.Insert}),
        ['<Tab>'] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_next_item()
          elseif luasnip.expand_or_jumpable() then
            luasnip.expand_or_jump()
          else
            fallback()
          end
        end, {'i', 's'}),
        ['<S-Tab>'] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_prev_item()
          elseif luasnip.jumpable(-1) then
            luasnip.jump(-1)
          else
            fallback()
          end
        end, {'i', 's'})
      }),
      window = {
        completion = cmp.config.window.bordered(),
        documentation = cmp.config.window.bordered(),
      },
    })
    require("cmp_git").setup()
    cmp.setup.filetype('gitcommit', {
      sources = cmp.config.sources({
        { name = "git" },
      }, {
        { name = "buffer" },
      })
    })
    cmp.setup.cmdline({ '/', '?' }, {
      mapping = cmp.mapping.preset.cmdline(),
      sources = {
        { name = "buffer" }
      }
    })
    cmp.setup.cmdline({ '/' }, {
      sources = cmp.config.sources({
        { name = "nvim_lsp_document_symbol" }
      }, {
        { name = "buffer" }
      }),
    })
    cmp.setup.cmdline({ ':' }, {
      mapping = cmp.mapping.preset.cmdline(),
      sources = cmp.config.sources({
        { name = "path" }
      }, {
        { name = "cmdline" }
      }),
      -- matching = { disallow_symbol_nonprefix_matching = false }
    })

		local lspconfig = require("lspconfig")
		local cmp_nvim_lsp = require("cmp_nvim_lsp")
		local protocol = require("vim.lsp.protocol")

		local completionItem = {
			textDocument = {
				completion = {
					completionItem = {
						documentationFormat = { "markdown", "plaintext" },
						snippetSupport = true,
						preselectSupport = true,
						insertReplaceSupport = true,
						labelDetailsSupport = true,
						deprecatedSupport = true,
						commitCharactersSupport = true,
						tagSupport = { valueSet = { 1 } },
						resolveSupport = {
							properties = {
								"documentation",
								"detail",
								"additionalTextEdits",
							},
						},
					},
				},
			},
		}

		local capabilities = vim.tbl_deep_extend(
			"force",
			protocol.make_client_capabilities(),
			cmp_nvim_lsp.default_capabilities(),
			completionItem
		)
    lspconfig.util.default_config = capabilities
  end
}

return { M }
local M = {
  "norcalli/nvim-colorizer.lua",
  event = "User FilePost",
  opts = {
    RGB = true,
    RRGGBB = true,
    names = true,
    RRGGBBAA = true,
    rgb_fn = true,
    mode = "background"
  },
  config = function(_, opts)
    require("colorizer").setup({'*'}, opts)
  end
}

return { M }
local M = {
	'mfussenegger/nvim-dap-python',
	config = function ()
		require("dap-python").setup(vim.g.python3_host_prog)
	end
}

return { M }
local M = {
  "rcarriga/nvim-dap-ui",
  dependencies = {"mfussenegger/nvim-dap", "nvim-neotest/nvim-nio"}
}

return { M }
local M = {
  'mfussenegger/nvim-dap'
}

return { M }
local M = {
	"neovim/nvim-lspconfig",
	event = "User FilePost",
	dependencies = {
		"williamboman/mason-lspconfig.nvim",
		"williamboman/mason.nvim",
		"hrsh7th/cmp-nvim-lsp",
		"jubnzv/virtual-types.nvim",
		{
			"folke/neodev.nvim",
			opts = {
				library = { plugins = { "nvim-dap-ui" }, types = true },
			},
		},
	},
	config = function(_, opts)
		local lspconfig = require("lspconfig")
		local mason_lspconfig = require("mason-lspconfig")
		local cmp_nvim_lsp = require("cmp_nvim_lsp")
		local protocol = require("vim.lsp.protocol")

		local completionItem = {
			textDocument = {
				completion = {
					completionItem = {
						documentationFormat = { "markdown", "plaintext" },
						snippetSupport = true,
						preselectSupport = true,
						insertReplaceSupport = true,
						labelDetailsSupport = true,
						deprecatedSupport = true,
						commitCharactersSupport = true,
						tagSupport = { valueSet = { 1 } },
						resolveSupport = {
							properties = {
								"documentation",
								"detail",
								"additionalTextEdits",
							},
						},
					},
				},
			},
		}

		local capabilities = vim.tbl_deep_extend(
			"force",
			protocol.make_client_capabilities(),
			cmp_nvim_lsp.default_capabilities(),
			completionItem
		)

		local on_attach = function(_, bufnr)
			vim.keymap.set("n", "gD", vim.lsp.buf.declaration, { buffer = bufnr, desc = "[LSP] Go to declaration" })
			vim.keymap.set("n", "gd", vim.lsp.buf.definition, { buffer = bufnr, desc = "[LSP] Go to definition" })
			vim.keymap.set(
				"n",
				"gi",
				vim.lsp.buf.implementation,
				{ buffer = bufnr, desc = "[LSP] Go to implementation" }
			)
			vim.keymap.set(
				"n",
				"<leader>sh",
				vim.lsp.buf.signature_help,
				{ buffer = bufnr, desc = "[LSP] Show signature help" }
			)
			vim.keymap.set(
				"n",
				"<leader>wa",
				vim.lsp.buf.add_workspace_folder,
				{ buffer = bufnr, desc = "[LSP] Add workspace folder" }
			)
			vim.keymap.set(
				"n",
				"<leader>wr",
				vim.lsp.buf.remove_workspace_folder,
				{ buffer = bufnr, desc = "[LSP] Remove workspace folder" }
			)
			vim.keymap.set("n", "<leader>wl", function()
				print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
			end, { buffer = bufnr, desc = "[LSP] List workspace folders" })
			vim.keymap.set(
				"n",
				"<leader>D",
				vim.lsp.buf.type_definition,
				{ buffer = bufnr, desc = "[LSP] Go to type definition" }
			)
			vim.keymap.set("n", "<leader>ra", vim.lsp.buf.rename, { buffer = bufnr, desc = "[LSP] Rename " })
			vim.keymap.set(
				{ "n", "v" },
				"<leader>ca",
				vim.lsp.buf.code_action,
				{ buffer = bufnr, desc = "[LSP] Code action" }
			)
			vim.keymap.set("n", "gr", vim.lsp.buf.references, { buffer = bufnr, desc = "[LSP] Show references" })
		end

		mason_lspconfig.setup_handlers({
			function(server_name)
				lspconfig[server_name].setup({
					capabilities = capabilities,
				})
			end,
			["lua_ls"] = function()
				lspconfig["lua_ls"].setup({
					on_attach = on_attach,
					capabilities = capabilities,
					settings = {
						Lua = {
							runtime = { version = "LuaJIT" },
							diagnostics = {
								globals = { "vim" },
							},
							workspace = {
								library = {
									vim.fn.expand("$VIMRUNTIME/lua"),
									vim.fn.expand("$VIMRUNTIME/lua/vim/lsp"),
									vim.fn.stdpath("data") .. "/lazy/lazy.nvim/lua/lazy",
									"${3rd}/luv/library",
								},
							},
						},
					},
				})
			end,
			["pylsp"] = function()
				local venv_path = os.getenv("VIRTUAL_ENV")
				local py_path = nil
				if venv_path ~= nil then
					py_path = venv_path .. "/bin/python3"
				else
					py_path = vim.g.python3_host_prog
				end
				lspconfig["pylsp"].setup({
					on_attach = on_attach,
					settings = {
						pylsp = {
							plugins = {
								-- formatter
								black = { enabled = true },
								pylint = { enabled = true, executable = "pylint", args = {"-d C0114,C0115,C0116"} },
								ruff = { enabled = true },
								pylsp_mypy = {
									enabled = true,
									overrides = { "--python-executable", py_path, true },
									report_progress = true,
									live_mode = true,
								},
								pycodestyle = {
									ignore = { "W391" },
									maxLineLength = 100,
								},
								isort = { enabled = true },
							},
						},
					},
					capabilities = capabilities,
				})
			end,
			["groovyls"] = function()
				lspconfig["groovyls"].setup({
					filetypes = { "groovy" },
					cmd = {
						"java",
						"-jar",
						"/home/gklodkox/sources/groovy-language-server/build/libs/groovy-language-server-all.jar",
					},
					on_attach = on_attach,
					capabilities = capabilities,
					settings = {
						groovy = {
							classpath = {
								vim.fn.expand("%"),
								string.gsub(vim.fn.system("git rev-parse --show-toplevel"), "\n", ""),
							},
						},
					},
				})
			end,
			["clangd"] = function()
				lspconfig["clangd"].setup({
					filetypes = { "c", "cpp", "cc" },
					on_attach = on_attach,
					capabilities = capabilities,
				})
			end,
			["bashls"] = function()
				lspconfig["bashls"].setup({
					on_attach = on_attach,
					capabilities = capabilities,
				})
			end,
			["vimls"] = function()
				lspconfig["vimls"].setup({
					on_attach = on_attach,
					capabilities = capabilities,
				})
			end,
			["dockerls"] = function()
				lspconfig["dockerls"].setup({
					on_attach = on_attach,
					settings = {
						docker = {
							languageserver = {
								formatter = {
									ignoreMultilineInstructions = true,
								},
							},
						},
					},
					capabilities = capabilities,
				})
			end,
		})
	end,
}

return { M }
local M = {
	"kylechui/nvim-surround",
	version = "*", -- Use for stability; omit to use `main` branch for the latest features
	event = "VeryLazy",
	config = function()
		require("nvim-surround").setup({
			-- Configuration here, or leave empty to use defaults
		})
	end,
}

return { M }
local M = {
  "nvim-tree/nvim-tree.lua",
  cmd = { "NvimTreeToggle", "NvimTreeFocus" },
  opts = {
    sort = {
      sorter = "case_sensitive",
    },
    view = {
      width = 30,
    },
    renderer = {
      group_empty = true,
    },
  }
}

return { M }
local M = {
  "nvim-treesitter/nvim-treesitter-context",
  opts = {
    enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
    max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
    min_window_height = 0, -- Minimum editor window height to enable context. Values <= 0 mean no limit.
    line_numbers = true,
    multiline_threshold = 20, -- Maximum number of lines to show for a single context
    trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer'
    mode = 'cursor',  -- Line used to calculate context. Choices: 'cursor', 'topline'
    -- Separator between context and content. Should be a single character string, like '-'.
    -- When separator is set, the context will only show up when there are at least 2 lines above cursorline.
    separator = nil,
    zindex = 20, -- The Z-index of the context window
    on_attach = nil, -- (fun(buf: integer): boolean) return false to disable attaching
  }
}

return { M }
local M = {
  "nvim-treesitter/nvim-treesitter",
  build = ":TSUpdate",
  dependencies = {
    "windwp/nvim-ts-autotag",
    "nvim-treesitter/nvim-treesitter-textobjects",
    "RRethy/nvim-treesitter-textsubjects",
    "LiadOz/nvim-dap-repl-highlights"
  },
  opts = {
    ensure_installed = {
      "vimdoc", "c", "lua", "rust",
      "jsdoc", "bash", "vim", "query", "markdown", "groovy",
      "markdown_inline", "python", "cpp", "fish", "dap_repl"
    },
    sync_install = false,
    ignore_install = {""},
    highlight = { enable =  true, additional_vim_regex_highlighting = false },
    indent = { enable = true },
    autotag = { enable = true },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = "<C-space>",
        node_incremental = "<C-space>",
        scope_incremental = false,
        node_decremental = "<bs>",
      },
    },
    context_commentstring = {
      enable = true,
      enable_autocmd = false,
    },
    textobjects = { enable = true },
    textsubjects = { enable = true, prev_selection = ',', keymaps = {
            ['.'] = 'textsubjects-smart',
            [';'] = 'textsubjects-container-outer',
            ['i;'] = { 'textsubjects-container-inner', desc = "Select inside containers (classes, functions, etc.)" },
        } }
  },
  config = function(_, opts)
    local configs = require("nvim-treesitter.configs")
    require("nvim-dap-repl-highlights").setup()

    configs.setup(opts)
  end
}

return { M }
local M = {
  'kevinhwang91/nvim-ufo',
  dependencies = {'kevinhwang91/promise-async'},
  init = function()
    vim.o.foldcolumn = '0' -- '0' is not bad
    vim.o.foldlevel = 99 -- Using ufo provider need a large value, feel free to decrease the value
    vim.o.foldlevelstart = 99
    vim.o.foldenable = true
  end,
  config = function()
    local ufo = require("ufo")

    vim.keymap.set('n', 'zR', ufo.openAllFolds)
    vim.keymap.set('n', 'zM', ufo.closeAllFolds)
    vim.keymap.set('n', 'zr', ufo.openFoldsExceptKinds)
    vim.keymap.set('n', 'zm', ufo.closeFoldsWith)

    ufo.setup({
      provider_selector = function(bufnr, filetype, buftype)
          return {'treesitter', 'indent'}
      end
    })
  end
}

return { M }
local M = {
  'nvim-telescope/telescope.nvim',
  branch = '0.1.x',
  cmd = "Telescope",
  dependencies = {
      'nvim-treesitter/nvim-treesitter',
      "nvim-telescope/telescope-ui-select.nvim",
      "nvim-telescope/telescope-file-browser.nvim",
      "nvim-telescope/telescope-project.nvim",
      "nvim-telescope/telescope-live-grep-args.nvim",
      "nvim-telescope/telescope-frecency.nvim",
      "nvim-telescope/telescope-dap.nvim",
  },
  opts = {
    defaults = {
      prompt_prefix = "   ",
      selection_caret = " ",
      entry_prefix = " ",
      sorting_strategy = "ascending",
      layout_config = {
        horizontal = {
          prompt_position = "top",
          preview_width = 0.55,
        },
        width = 0.87,
        height = 0.80,
      },
      mappings = {
        n = {
          ["q"] = require("telescope.actions").close,
        },
      },
    },
    extensions_list = { "ui-select", "frecency", "project", "live_grep_args", "dap" },
    extensions = {},
  },
  config = function(_, opts)
    local telescope = require("telescope")
    local builtin = require("telescope.builtin")

    telescope.setup(opts)

    for _, extension in ipairs(opts.extensions_list) do
      telescope.load_extension(extension)
    end

    local builtin = require('telescope.builtin')
    vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = "Find files" })
    vim.keymap.set('n', '<leader>fg', telescope.extensions.live_grep_args.live_grep_args, { desc = "Grep files" })
    vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = "Search buffers" })
    vim.keymap.set('n', '<leader>fh', builtin.help_tags, { desc = "Search help tags" })
  end
}

return { M }
local M = {
  "folke/trouble.nvim",
  cmd = "Trouble",
  opts = {
    modes = {
      diagnostics_buffer = {
        mode = "diagnostics", -- inherit from diagnostics mode
        filter = { buf = 0 }, -- filter diagnostics to the current buffer
        auto_close = false,
        auto_open = false,
        open_no_results = false,
      },
    }
  },
  keys = {
    {
      "<leader>tt",
      "<cmd>Trouble diagnostics toggle<cr>",
      desc = "Diagnostics (Trouble)",
    },
    {
      "<leader>tT",
      "<cmd>Trouble diagnostics toggle filter.buf=0<cr>",
      desc = "Buffer Diagnostics (Trouble)",
    },
    {
      "<leader>tl",
      "<cmd>Trouble lsp toggle focus=false win.position=right<cr>",
      desc = "LSP Definitions / references / ... (Trouble)",
    },
    {
      "<leader>tL",
      "<cmd>Trouble loclist toggle<cr>",
      desc = "Location List (Trouble)",
    },
    {
      "<leader>tq",
      "<cmd>Trouble qflist toggle<cr>",
      desc = "Quickfix List (Trouble)",
    },
    {
      "<leader>[d",
      "<cmd>Trouble diagnostics next<cr>",
      desc = "Next diagnostic (Trouble)",
    },
    {
      "<leader>]d",
      "<cmd>Trouble diagnostics previous<cr>",
      desc = "Previous diagnostic (Trouble)",
    },
  },
}

return { M }
local M = {
  "mbbill/undotree",
  config = function()
      vim.keymap.set("n", "<leader>u", vim.cmd.UndotreeToggle, { desc = "Undotree" })
  end
}

return { M }
local M = {
  "folke/which-key.nvim",
  event = "VeryLazy",
  opts = {
    preset = "modern",
    icons = {
      mappings = false
    }
  },
  config = function(_, opts)
    require("which-key").setup(opts)
  end
}

return { M }
local M = {
  "gbprod/yanky.nvim",
  opts = {
    preserve_cursor_position = { enabled = false }
  }
}

return { M }
